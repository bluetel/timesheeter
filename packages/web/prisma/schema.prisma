// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider      = "prisma-client-js"
  // Need the second for AWS ARM architecture
  binaryTargets = ["native", "linux-arm64-openssl-1.0.x"]
}

datasource db {
  provider = "postgresql"
  // NOTE: When using postgresql, mysql or sqlserver, uncomment the @db.Text annotations in model Account below
  // Further reading:
  // https://next-auth.js.org/adapters/prisma#create-the-prisma-schema
  // https://www.prisma.io/docs/reference/api-reference/prisma-schema-reference#string
  url      = env("DATABASE_URL")
}

// Necessary for Next auth
model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? // @db.Text
  access_token      String? // @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? // @db.Text
  session_state     String?
  user              User    @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
  id               String           @id @default(cuid())
  name             String?
  email            String?          @unique
  emailVerified    DateTime?
  image            String?
  accounts         Account[]
  sessions         Session[]
  workspaceId      String?
  memberships      Membership[]
  timesheetEntries TimesheetEntry[]
  holidays         Holiday[]
  scopedTasks      Task[]
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

model Workspace {
  id               String            @id @default(cuid())
  name             String
  createdAt        DateTime          @default(now())
  updatedAt        DateTime          @updatedAt
  memberships      Membership[]
  integrations     Integration[]
  projects         Project[]
  tasks            Task[]
  timesheetEntries TimesheetEntry[]
  holidays         Holiday[]
  taskPrefixes     TaskPrefix[]
  ticketForTasks   TicketForTask[]
  invitations      Invitation[]
  togglSyncRecords TogglSyncRecord[]
}

model Membership {
  id          String    @id @default(cuid())
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
  user        User      @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId      String
  workspace   Workspace @relation(fields: [workspaceId], references: [id], onDelete: Cascade)
  workspaceId String
  role        String

  @@unique([userId, workspaceId])
}

model Invitation {
  id          String    @id @default(cuid())
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
  email       String
  workspace   Workspace @relation(fields: [workspaceId], references: [id], onDelete: Cascade)
  workspaceId String
  accepted    Boolean   @default(false)

  @@unique([email, workspaceId])
}

model Integration {
  id          String    @id @default(cuid())
  workspace   Workspace @relation(fields: [workspaceId], references: [id], onDelete: Cascade)
  workspaceId String
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt

  name             String
  configSerialized String

  repeatJobKey String?
}

model Project {
  id          String    @id @default(cuid())
  workspace   Workspace @relation(fields: [workspaceId], references: [id], onDelete: Cascade)
  workspaceId String
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt

  name String

  configSerialized String

  tasks        Task[]
  taskPrefixes TaskPrefix[]

  togglProjectId BigInt?

  deleted Boolean @default(false)

  @@unique([togglProjectId, workspaceId])
}

model TaskPrefix {
  id          String    @id @default(cuid())
  workspace   Workspace @relation(fields: [workspaceId], references: [id], onDelete: Cascade)
  workspaceId String
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt

  prefix String

  projectId String
  project   Project @relation(fields: [projectId], references: [id], onDelete: Cascade)

  ticketsForTasks TicketForTask[]

  deleted Boolean @default(false)

  @@unique([prefix, workspaceId])
}

model Task {
  id          String    @id @default(cuid())
  workspace   Workspace @relation(fields: [workspaceId], references: [id], onDelete: Cascade)
  workspaceId String
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt

  scopedUserId String?
  scopedUser   User?   @relation(fields: [scopedUserId], references: [id], onDelete: Cascade)

  ticketForTask TicketForTask?

  name String

  project   Project @relation(fields: [projectId], references: [id], onDelete: Cascade)
  projectId String

  configSerialized String

  timesheetEntries TimesheetEntry[]

  togglTaskId BigInt?

  deleted Boolean @default(false)

  @@unique([togglTaskId, workspaceId])
}

model TicketForTask {
  id          String    @id @default(cuid())
  workspace   Workspace @relation(fields: [workspaceId], references: [id], onDelete: Cascade)
  workspaceId String
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt

  taskPrefixId String
  taskPrefix   TaskPrefix @relation(fields: [taskPrefixId], references: [id], onDelete: Cascade)

  taskId String @unique
  task   Task   @relation(fields: [taskId], references: [id], onDelete: Cascade)

  number Int

  jiraTicketId String?

  deleted Boolean @default(false)

  @@unique([taskPrefixId, number])
}

model TimesheetEntry {
  id          String    @id @default(cuid())
  workspace   Workspace @relation(fields: [workspaceId], references: [id], onDelete: Cascade)
  workspaceId String
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt

  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId String

  task   Task   @relation(fields: [taskId], references: [id], onDelete: Cascade)
  taskId String

  description String?

  start DateTime
  end   DateTime

  configSerialized String

  togglTimeEntryId BigInt?

  deleted Boolean @default(false)

  @@unique([togglTimeEntryId, workspaceId])
}

model Holiday {
  id          String    @id @default(cuid())
  workspace   Workspace @relation(fields: [workspaceId], references: [id], onDelete: Cascade)
  workspaceId String

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  description String?

  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId String

  start DateTime
  end   DateTime
}

model TogglSyncRecord {
  id          String    @id @default(cuid())
  workspace   Workspace @relation(fields: [workspaceId], references: [id], onDelete: Cascade)
  workspaceId String

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  category      String
  togglEntityId BigInt

  togglProjectId BigInt

  @@unique([workspaceId, category, togglEntityId, togglProjectId])
}
